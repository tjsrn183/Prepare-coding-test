// 이번문제는 완전탐색 알고리즘을 통해 소수를 찾는 문제입니다.
// 완전탐색을하며 중복된 수가 counting될 수 있으니 set객체를 사용해주었습니다.
// 그리고 확실한 종료조건이 있는것이 아니라 어떤 조합이든 계산하는것이니 dfs상단에 종료조건을 명시해주지는 않았으며 visit로만 방문여부를 판단해주었습니다. 
// 원래는 코드를 짤때 solution함수 밖에 dfs함수를 만들어주었는데 다른사람들의 코드를 보니 보통은 solution함수안에 dfs함수를 써놓는것을 보며 어떤이점이 있을지 생각해보았습니다.
// 보통은 정답을 answer 변수에 담아서 return하는데 그렇게 한다고했을때 함수를 분리시켜놓으면 값에의한 호출를 하기때문에 함수파라메터로 더 많은 부분을 전달해줘야할 수 있지만
// 이렇게 솔루션 함수내부에 dfs를 선언해놓으면 실행컨텍스트 규칙에 따라 solution함수의 변수를 전달받지않아도 사용할 수 있는 장점이 있습니다. 
// 실무에서 코드를짤때는 분리를 하겠지만 코테문제를 풀땐 이렇게 중첩으로 함수를 쓰는것도 편리하겠다 싶습니다.
function isPrime(num) {
  if(num === 1 || num===0) return false;
  if(num === 2) {
    return true;
  }
  for(let i = 2; i <= Math.floor(Math.sqrt(num)); i++){
    if(num % i === 0){
      return false; 
    }
  }

  return true; 
}

function solution(numbers) {
    var answer = 0;
    let index=0;
    let string='';
    const numArr=Array.from(numbers);
    const visit=Array(numbers.length).fill(false);
    const set=new Set();
    const immeS=[];
    
    
    function dfs(numArr,index,visit,string,immeS){
    
    for(let a=0;a<numArr.length;a++){
        if(!visit[a]){
            visit[a]=true;
            immeS.push(numArr[a]);
            string=parseInt(immeS.join(''));
            if(isPrime(string)){
                set.add(string);}
            dfs(numArr,a,visit,string,immeS);
            visit[a]=false;
            immeS.pop();
        }
    }
        return set.size;
}
  
    answer=dfs(numArr,index,visit,string,immeS);
    return answer;
}
