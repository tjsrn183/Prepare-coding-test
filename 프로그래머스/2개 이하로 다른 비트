// 해당문제는 수를 비교해가며 xor연산자의 결과가 2개 이하인 최소수를 구하는문제이다.
// 난 당연 문제대로 코드를 써나갔지만 계속 채점에서 두개가 시간초과를 일으켰다.
// 각 요소의 최대값을보니 반복문을 여러번돌리면 당연히 안되는것같긴 했는데 그래도 난 뒤에서부터 비교해가며 중간에 끊어주면 범위를 벗어나지않을수도 있겠다 싶어 그렇게 짜보았다
// 하지만 실패했다. 
// 1. 첫번째코드는 가장 뒤에 비트부터 비교해가는 단순한 알고리즘이다.
// 2. 두번째코드는 xor연산자와 정규표현식을 이용한 알고리즘이지만 첫번째와 비슷하다.
// 3. 세번째는 요소가 짝수일경우 요소+1 만하면된다는 규칙이 보여서 짝수일경우 반복문을 continue;하는 식을 추가하였지만 실패하였다.
// 4. 네번째는 타인의 코드를 참조하였고 홀수일때도 패턴이 있다는것을 발견한 코드이다.
//   결국 이 문제는 순회하는 문제가 아니라 패턴을 찾는 문제였던 것이다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ첫번째 코드 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
function solution(numbers) {
    var answer = [];
    for(let item of numbers){
        let itemCopy = BigInt(item);
        let flag=false;
      
        let nextBin='';
    //    if(typeof itemCopy!=="number") 
        let itemBin=itemCopy.toString(2);
       
  //     
        //for(let a=0;a<20;a++)
         while(!flag){
             let count=0;
            ++itemCopy;
           
           nextBin=itemCopy.toString(2);
            let length=itemBin.length>nextBin.length?itemBin.length:nextBin.length;
            let iIndex=itemBin.length-1;
            let nIndex=nextBin.length-1;
            for(let a=length-1;a>=0;a--){
                if(count>=3) break;
               
                (itemBin[iIndex]||0)!==(nextBin[nIndex]||0)?++count:count;
                --iIndex;
                --nIndex;
            }
            if(count<=2) {
             
                    flag=true;
                    answer.push(itemCopy);
                    break;
                }
           
            
        }
       
    }
    return answer;
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ두번째 코드 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
function solution(numbers) {
    var answer = [];
    for(let item of numbers){
        
        let itemCopy = BigInt(item);
         let itemCopy2 = BigInt(item);
        let flag=false;
      
        let nextBin='';
 
        let itemBin=itemCopy.toString(2);
  
         while(!flag){
             let count=0;
            ++itemCopy;
           
           nextBin=itemCopy.toString(2);
         
               let resultBin=(itemCopy^itemCopy2).toString(2);
                count=resultBin.match(/1/g).length;
    
            if(count<=2) {
             
                    flag=true;
                    answer.push(itemCopy);
                    break;
                }
           
            
        }

    }
    return answer;
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ세번째 코드 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
function solution(numbers) {
    var answer = [];
    for(let item of numbers){
        let itemCopy = BigInt(item);
         let itemCopy2 = BigInt(item);
        let flag=false;
        let nextBin='';
        let itemBin=itemCopy.toString(2);
        if(item%2===0){
            answer.push(item+1);
            continue;
         }
         while(!flag){
             let count=0;
            ++itemCopy;
           
           nextBin=itemCopy.toString(2);
         
               let resultBin=(itemCopy^itemCopy2).toString(2);
                count=resultBin.match(/1/g).length;
    
            if(count<=2) {
                    flag=true;
                    answer.push(itemCopy);
                    break;
                }
           
            
        }

    }
    return answer;
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ세번째 코드 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
function solution(numbers) {

    const answer = [];
    for(let number of numbers){
        if(number % 2 === 0){ 
            answer.push(number+1)
        } else { 
            const numberBinary = number.toString(2);
            const position = numberBinary.lastIndexOf("0");
            if(position === -1)
                answer.push(parseInt("10"+numberBinary.slice(1), 2));
            else{
                const value = numberBinary.slice(0, position)+"10"+numberBinary.slice(position+2);
                answer.push(parseInt(value, 2));
            }    
        }
    }
    return answer;
}
