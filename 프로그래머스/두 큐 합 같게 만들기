//이 문제는 큐의 원리를 사용해서 두큐의 합이 같게만드는 알고리즘을 구현하는 문제이다
// 처음에는 단순히 전부 다 해봐야 최소를 알것같으니 백트래킹 알고르즘을 구현하는 문제인가 고민했지만
// 두개의 큐를 "적당히" 옮기며 답을 구해야하는 문제이므로 두큐의 합의 어느쪽이 크냐에 따라 큐의 움직임을 결정해주면 되는문제였다.
// 나는 에러가 시간초과로 발생하였는데 그 에러를 해결하는 방법은
// 1. 큐를 사용할때 배열의 메서드인 shift 메서드나 push메서드는 시간복잡도가 생각보다 크다는것을 알게되었고 큐를 따로 구현하여 사용하였다
// 2. 첫번째 문제를 해결해도 에러가 발생하였고 지금의 문제는 반복문을 도는 횟수에 문제가 있었다. 그래서 하나의 큐배열의 최대 크기가 30만이니깐 60만번 돌게 하였더니 해결되었다.
// 배운점은 문제에 "언어에따라 시간초과가 날수있다."라던가 시간초과가 날법한 부분은 shift메서드나 push메서드를 사용하는것보다는 큐를 직접 구현하여 사용하는것이 좋겠다는점이다.
class Queue {
 
  constructor(arr,length) {
    this.queue = arr;
    this.front = 0;
    this.rear = length;
  }


  enqueue(value) {
    this.queue[this.rear++] = value;
  }


  dequeue() {
    const value = this.queue[this.front];
    delete this.queue[this.front];
    this.front += 1;
    return value;
  }


  peek() {
    return this.queue[this.front];
  }

 
  size() {
    return this.rear - this.front;
  }
}
function solution(queue1, queue2) {
    var answer = 0;
  const queue11=new Queue(queue1,queue1.length);
const queue22=new Queue(queue2,queue2.length);
    let sum1=queue1.reduce((acc,cur)=>acc+cur,0);
    let sum2=queue2.reduce((acc,cur)=>acc+cur,0);
    let flag=false;
    const totalNum=(queue1.length*2)+3;
    for(let a=0;a<totalNum;a++){
        if(sum1===sum2){
            flag=true;
            break;
        }
            else if(sum1>sum2){
              let imme=queue11.dequeue();
            queue22.enqueue(imme);
                sum1-=imme;
                sum2+=imme;
                ++answer;
            }
                else if(sum1<sum2){  
             let imme=queue22.dequeue();
              queue11.enqueue(imme);
                sum2-=imme;
                sum1+=imme;
                ++answer;
                }
    }
    
    return flag?answer:-1;
}
